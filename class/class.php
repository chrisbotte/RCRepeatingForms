<?php

require_once '/../../redcap_connect.php';
require_once '/../api/RestCallRequest.php';
require_once '/../fcns/functions.php';


//******************************************************************
//******************************************************************
// MODIFY as needed
define("HOST", "SOME_HOST");  //redcap host - could read from database.php
define("UNAME", "SOME_UNAME"); //mysql user name - could read from database.php
define("PWD", "SOME_PWD"); //mysql pwd - could read from database.php
define("RC_API_URL", "http://redcap-dev/redcap_ddp/api/"); // api url (check if available as global)
define("RF_BASE_URL","http://redcap-dev/redcap_ddp/plugins/rf/"); // base path to repeating form folder 

//******************************************************************
//******************************************************************
//******************************************************************


// CLASS: CONFIG
// REQ INPUT: current project_id, record, instrument, event, token, action
// OPTIONAL INPUT: curr_it
// DESC:  	Primary role of class is to construct a multi-dim CONFIG array that contains all of teh info needed to save or display repeating records.
//  		Array will contain basic info (curr pid, curr rec, curr instr, etc.).  Will also  organize all fields that are on current instrument so that 
//			all field, info, labels, codes and metedata needed in other layers of plugin (data, ui, action, etc.) 
// 
// SAMPLE CONFIG array generated by class is below
//
// Array
// (
//     [pid] => 65
//     [rec] => 2
//     [instr] => demographics
//     [event] => 156
//     [token] => SOME_TOKEN
//     [action] => disp
//     [api_url] => http://redcap-dev/redcap_ddp/api/
//     [curr_it] => 
//     [metadata] => Array
//         (
//             [0] => Array
//                 (
//                     [field_name] => study_id
//                     [form_name] => demographics
//                     [section_header] => 
//                     [field_type] => text
//                     [field_label] => Study ID
//                     [select_choices_or_calculations] => 
//                     [field_note] => 
//                     [text_validation_type_or_show_slider_number] => 
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => 
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )

//             [1] => Array
//                 (
//                     [field_name] => date_enrolled
//                     [form_name] => demographics
//                     [section_header] => Consent Information
//                     [field_type] => text
//                     [field_label] => Date subject signed consent
//                     [select_choices_or_calculations] => 
//                     [field_note] => YYYY-MM-DD
//                     [text_validation_type_or_show_slider_number] => date_ymd
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => 
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )

//             [2] => Array
//                 (
//                     [field_name] => patient_document
//                     [form_name] => demographics
//                     [section_header] => 
//                     [field_type] => file
//                     [field_label] => Upload the patient's consent form
//                     [select_choices_or_calculations] => 
//                     [field_note] => 
//                     [text_validation_type_or_show_slider_number] => 
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => 
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )
//				...
//				...
//				...
//         
//             [9] => Array
//                 (
//                     [field_name] => age
//                     [form_name] => demographics
//                     [section_header] => 
//                     [field_type] => calc
//                     [field_label] => Age (years)
//                     [select_choices_or_calculations] => rounddown(datediff([dob],'today','y'))
//                     [field_note] => 
//                     [text_validation_type_or_show_slider_number] => 
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => 
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )

//             [10] => Array
//                 (
//                     [field_name] => ethnicity
//                     [form_name] => demographics
//                     [section_header] => 
//                     [field_type] => radio
//                     [field_label] => Ethnicity
//                     [select_choices_or_calculations] => 0, Hispanic or Latino | 1, NOT Hispanic or Latino | 2, Unknown / Not Reported
//                     [field_note] => 
//                     [text_validation_type_or_show_slider_number] => 
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => LH
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )

//             [11] => Array
//                 (
//                     [field_name] => race
//                     [form_name] => demographics
//                     [section_header] => 
//                     [field_type] => dropdown
//                     [field_label] => Race
//                     [select_choices_or_calculations] => 0, American Indian/Alaska Native | 1, Asian | 2, Native Hawaiian or Other Pacific Islander | 3, Black or African American | 4, White | 5, More Than One Race | 6, Unknown / Not Reported
//                     [field_note] => 
//                     [text_validation_type_or_show_slider_number] => 
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => 
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )
//				...
//				...
//				...

//             [23] => Array
//                 (
//                     [field_name] => bmi
//                     [form_name] => demographics
//                     [section_header] => 
//                     [field_type] => calc
//                     [field_label] => BMI
//                     [select_choices_or_calculations] => round(([weight]*10000)/(([height])^(2)),1)
//                     [field_note] => 
//                     [text_validation_type_or_show_slider_number] => 
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => 
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )

//             [24] => Array
//                 (
//                     [field_name] => comments
//                     [form_name] => demographics
//                     [section_header] => General Comments
//                     [field_type] => notes
//                     [field_label] => Comments
//                     [select_choices_or_calculations] => 
//                     [field_note] => 
//                     [text_validation_type_or_show_slider_number] => 
//                     [text_validation_min] => 
//                     [text_validation_max] => 
//                     [identifier] => 
//                     [branching_logic] => 
//                     [required_field] => 
//                     [custom_alignment] => 
//                     [question_number] => 
//                     [matrix_group_name] => 
//                     [matrix_ranking] => 
//                 )

//         )

//     [instr_fields] => Array
//         (
//             [study_id] => Array
//                 (
//                     [field_name] => study_id
//                     [field_label] => Study ID
//                     [field_type] => text
//                     [field_meta] => 
//                 )

//             [date_enrolled] => Array
//                 (
//                     [field_name] => date_enrolled
//                     [field_label] => Date subject signed consent
//                     [field_type] => text
//                     [field_meta] => 
//                 )

//             [age] => Array
//                 (
//                     [field_name] => age
//                     [field_label] => Age (years)
//                     [field_type] => calc
//                     [field_meta] => Array
//                         (
//                             [rounddown(datediff([dob]] => 'today','y'))
//                         )

//                 )

//				...
//				...
//				...

//             [ethnicity] => Array
//                 (
//                     [field_name] => ethnicity
//                     [field_label] => Ethnicity
//                     [field_type] => radio
//                     [field_meta] => Array
//                         (
//                             [0] => Hispanic or Latino
//                             [1] => NOT Hispanic or Latino
//                             [2] => Unknown / Not Reported
//                         )

//                 )

//             [race] => Array
//                 (
//                     [field_name] => race
//                     [field_label] => Race
//                     [field_type] => dropdown
//                     [field_meta] => Array
//                         (
//                             [0] => American Indian/Alaska Native
//                             [1] => Asian
//                             [2] => Native Hawaiian or Other Pacific Islander
//                             [3] => Black or African American
//                             [4] => White
//                             [5] => More Than One Race
//                             [6] => Unknown / Not Reported
//                         )

//                 )

//             [sex] => Array
//                 (
//                     [field_name] => sex
//                     [field_label] => Gender
//                     [field_type] => radio
//                     [field_meta] => Array
//                         (
//                             [0] => Female
//                             [1] => Male
//                         )

//                 )

//             [given_birth] => Array
//                 (
//                     [field_name] => given_birth
//                     [field_label] => Has the patient given birth before?
//                     [field_type] => yesno
//                     [field_meta] => Array
//                         (
//                             [0] => No
//                             [1] => Yes
//                         )

//                 )

//             [num_children] => Array
//                 (
//                     [field_name] => num_children
//                     [field_label] => How many times has the patient given birth?
//                     [field_type] => text
//                     [field_meta] => 
//                 )

//             [gym] => Array
//                 (
//                     [field_name] => gym
//                     [field_label] => Gym (Weight Training)
//                     [field_type] => checkbox
//                     [field_meta] => Array
//                         (
//                             [0] => Monday
//                             [1] => Tuesday
//                             [2] => Wednesday
//                             [3] => Thursday
//                             [4] => Friday
//                         )

//                 )

//             [aerobics] => Array
//                 (
//                     [field_name] => aerobics
//                     [field_label] => Aerobics
//                     [field_type] => checkbox
//                     [field_meta] => Array
//                         (
//                             [0] => Monday
//                             [1] => Tuesday
//                             [2] => Wednesday
//                             [3] => Thursday
//                             [4] => Friday
//                         )

//                 )

//             [eat] => Array
//                 (
//                     [field_name] => eat
//                     [field_label] => Eat Out (Dinner/Lunch)
//                     [field_type] => checkbox
//                     [field_meta] => Array
//                         (
//                             [0] => Monday
//                             [1] => Tuesday
//                             [2] => Wednesday
//                             [3] => Thursday
//                             [4] => Friday
//                         )

//                 )

//				...
//				...
//				...

//             [demographics_complete] => Array
//                 (
//                     [field_name] => demographics_complete
//                     [field_label] => Complete?
//                     [field_type] => radio
//                     [field_meta] => Array
//                         (
//                             [0] => Inc
//                             [1] => Unverified
//                             [2] => Comp
//                         )

//                 )

//         )

//     [checkbox_flds] => Array
//         (
//             [0] => gym
//             [1] => aerobics
//             [2] => eat
//             [3] => drink
//             [4] => meds
//         )

// )




class config{

	public static $config;


	// builds master config array
	public function __construct($pid, $rec, $instr, $event, $token, $action, $curr_it=null){

		$this->config['pid']=$pid;
		$this->config['rec']=$rec;
		$this->config['instr']=$instr;
		$this->config['event']=$event;
		$this->config['token']=$token;
		$this->config['action']=$action;
		$this->config['api_url']=RC_API_URL;
		$this->config['curr_it'] = $curr_it;
		$this->config['metadata']=$this->getMetadata();
		$this->config['instr_fields'] = $this->getFieldInfo();
		$this->config['checkbox_flds'] = $this->getCheckboxFields();
	}


	// uses a simple RC API call to get all of the metadata needed for current instrument
	// data is converted from JSON to php array and returned
	private function getMetadata(){

		$fields = REDCap::getFieldNames($this->config['instr']);
		$data = array
				(
				'fields'=> $fields,
				'content' => 'metadata', 
				'type' => 'flat', 
				'format' => 'json', 
				'token' => $this->config['token']
				); 
		$request = new RestCallRequest($this->config['api_url'], 'POST', $data);
		$request->execute();
		
		//TO DO: err handling for API
		
		$data_arr = json_decode($request->getResponseBody(), true);
		return $data_arr;
	}


	// fcn is used to build the [instr_fields] part of the CONFIG multi-dim array
	// this array element will contain all of the field data and field metadata (organized in array) needed for each field in curr instr
	private function getFieldInfo(){
		
		$fields = REDCap::getFieldNames($this->config['instr']);

		for ($i=0; $i < count($fields); $i++) { 
			$cfld = $fields[$i];
			$fmeta = ($this->config['metadata'][$i]['field_type']=='yesno' || $this->config['metadata'][$i]['field_type']=='truefalse') 
				? array('No','Yes') 
				: mapStringToAssocArray($this->config['metadata'][$i]['select_choices_or_calculations'], '|', ',');
			$nfields[$cfld] = array('field_name' => $this->config['metadata'][$i]['field_name'],
									'field_label' => $this->config['metadata'][$i]['field_label'],
									'field_type' => $this->config['metadata'][$i]['field_type'],
									'field_meta' => $fmeta
								);
		}
		$cfld = $this->config['instr'].'_complete';
		$nfields[$cfld] = 	array(
									'field_name' => $this->config['instr'].'_complete',
									'field_label' => 'Complete?',
									'field_type' => 'radio',
									'field_meta' => array('Inc','Unverified', 'Comp')
								);
		return $nfields;
	}


	// fcn builds a simple PHO array of fields that are of type checkbox - for quick processing later in other layers
	private function getCheckboxFields(){

		$result = null;
		$arr = $this->config['instr_fields'];

		foreach ($arr as $key => $value) {
			if($value['field_type'] == 'checkbox'){
				$result[] = $key;
			}
		}

		return $result;
	}


}



/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/


// CLASS: DATA
// REQ INPUT: CONFIG array from class CONFIG (noted above)
// DESC:  	Primary role of class is to: 
// 			(1) using constants defined at top of page, connect to mysql schema that contains rf schema
// 			(2) using getData plugin, get any data that may have just been saved and store it in class array
// 			(3) using mysql connection, get all repeating data that has been entered into rf schema
//			Get data organized into appropriate arrays for future processing by classes UI and ACTION




class data{

	public static 	$config;
	private static 	$instr_data_labels;
	public static 	$instr_data_raw;
	private static 	$conn;
	public static 	$rep_data;
	public static 	$rep_data_iterations;

	public function __construct($config){
		$this->config = $config;
		$this->conn = $this->connectMYSQL();
		$this->getInstrData();
		$this->getRepData();
	}


	// setup connection using constants defined at top of page, connect to mysql schema that contains rf schema
	private function connectMYSQL(){

		$conn= mysqli_connect(HOST,UNAME,PWD,'rf');

        if(mysqli_connect_errno()){
           return null;
           // TO DO: Exception handling
        }
        
        return $conn;
   	}


   	// collects and organizes any data that MAY be associated with the current instrument and record (in teh case that a reciord was just saved)
   	// organizes data into 2 arrays (instr_data_raw and instr_data_labels)
   	private function getInstrData(){

  		$data = REDCap::getData ($this->config['pid'], 'json', $this->config['rec'], array_keys($this->config['instr_fields']), NULL ,NULL , false, FALSE , FALSE , NULL, true, false);
		$data = json_decode($data, true);
		$data = $data[0];
		
		for ($i=0; $i < count($this->config['checkbox_flds']) ; $i++) { 
			$cfld = $this->config['checkbox_flds'][$i];
			foreach ($data as $key => $value) {
    			$temp = explode($cfld . '___', $key);
    			if($temp[1] != null && $value == 'Checked'){
	         		$result[$cfld] .= $this->config['instr_fields'][$cfld]['field_meta'][$temp[1]] . "<br>";
	    		}
			}
		}
		
		$this->instr_data_labels = array_merge($data, $result);
		$this->instr_data_raw = REDCap::getData ($this->config['pid'], 'array', $this->config['rec'], array_keys($this->config['instr_fields']));
	}


	// fcn that simply retrieves all repeating data for curr instrument and record
	// data is organized into array for future processing - variable $rep_data
	// for each field value, provides numeric code and text equivalent for future processing
	// array can be easily looped for quick display in html table at bottom of current instr
	// general format of $rep_data : 

	// [rep_data] => Array
	//         (
	//             [1] => Array  // represents iteration number
	//                 (
	//                     [0] => Array  // represents column number is rf table that appears at bottom of form
	//                         (
	//                             [project_id] => 65
	//                             [record] => 2
	//                             [instrument] => demographics
	//                             [event_id] => 156
	//                             [iteration] => 1
	//                             [field_name] => study_id
	//                             [value] => 2
	//                             [field_type] => text
	//                             [root_name] => study_id
	//                             [pkey] => 3061
	//                             [text_value] => 2
	//                         )

	//                     [1] => Array
	//                         (
	//                             [project_id] => 65
	//                             [record] => 2
	//                             [instrument] => demographics
	//                             [event_id] => 156
	//                             [iteration] => 1
	//                             [field_name] => date_enrolled
	//                             [value] => 2015-03-05
	//                             [field_type] => text
	//                             [root_name] => date_enrolled
	//                             [pkey] => 3062
	//                             [text_value] => 2015-03-05
	//                         )
	
	// 						...
	// 						...
	// 						...
	//                  
	//                     [10] => Array
	//                         (
	//                             [project_id] => 65
	//                             [record] => 2
	//                             [instrument] => demographics
	//                             [event_id] => 156
	//                             [iteration] => 1
	//                             [field_name] => ethnicity
	//                             [value] => 2
	//                             [field_type] => radio
	//                             [root_name] => ethnicity
	//                             [pkey] => 3071
	//                             [text_value] => Unknown / Not Reported
	//                         )
	//						)
	// 				
	// 				[2] => Array  // represents iteration number
	//                 (
	//                     	[0] => Array  // represents column number is rf table that appears at bottom of form
	//						...
	//						...
	//						...
	//						[10]
	// 					)
	// 			)

	private function getRepData(){

		//get iterations
		$sql = "SELECT distinct iteration FROM rf_data where instrument='" . $this->config['instr'] . "' and record='" . $this->config['rec']. "' and project_id='" . $this->config['pid']. "' order by iteration";
        $res = mysqli_query($this->conn, $sql);
     
        if(is_bool($res)){
            return null;
            //TO DO: need ewception handling
        }
       
        $rows = mysqli_num_rows($res); 
        $this->rep_data_iterations = array();

        for ($i=0; $i < $rows ; $i++) { 
          	$row=mysqli_fetch_assoc($res);
           	$this->rep_data_iterations[] = $row['iteration'];
        }

        for ($i=0; $i < count($this->rep_data_iterations) ; $i++) { 
        	$curr_it = $this->rep_data_iterations[$i];
        	$sql = "SELECT * FROM rf_data where iteration = ".$curr_it." and instrument='" . $this->config['instr'] . "' and record='" . $this->config['rec']. "' and project_id='" . $this->config['pid']. "' order by iteration";
        	$res = mysqli_query($this->conn, $sql);
     
        	if(is_bool($res)){
            	return null;
            	//TO DO: need ewception handling
        	}

        	$rows = mysqli_num_rows($res); 
        	for ($j=0; $j < $rows ; $j++) { 
          		$row=mysqli_fetch_assoc($res);
          		$row['text_value'] = $this->getText($row['field_name'], $row['value'], $row['field_type']);
          		$rep_data[$curr_it][$j] = $row;
          	}
        }

        $this->rep_data = $rep_data;
    }
   

   	// utility fcn used to extract actual text value of field on instr - varies by field type  
   	private function getText($fld, $val, $type){
   		
   		switch ($type) {
   			case 'radio':
   			case 'dropdown':
   			case 'yesno':
   			case 'truefalse':
   				$info = $this->config['instr_fields'][$fld];
   				return $info['field_meta'][$val];
   				break;
   			
   			case 'checkbox':
   				$temp = explode("___", $fld);
   				$info = $this->config['instr_fields'][$temp[0]];
   				return ($val == 1) ? $info['field_meta'][$temp[1]] : null;
   				break;

   			default:
   				return $val;
   				break;
   		}
   	}

   	public function getConn(){
   		return $this->conn;
   	}

}



/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/


// CLASS: UI
// REQ INPUT: CONFIG array from class CONFIG (noted above), REPEATING data for form, current instr data saved in RC
// DESC:  	Primary role of class is to simply build an html table
//			utilizes html/hdr.html, datatables, colvis datatables (http://www.datatables.net/)


class ui{

	private static $config;
	private static $instr_data;
	private static $rep_data;
	private static $iterations;

	public function __construct($config, $rep_data, $instr_data, $iterations){
		$this->config = $config;
		$this->rep_data = $rep_data;
		$this->instr_data = $instr_data;
		$this->iterations = $iterations;
		$this->buildTableHTML();
	}

	private function getVal($iteration, $fld, $raw=null){
		
		$result = null;
		$type = REDCap::getFieldType($fld);
		$index = ($type == 'checkbox') ? 'root_name' : 'field_name'; 

		foreach ($this->rep_data[$iteration] as $key => $value) {
			if($this->rep_data[$iteration][$key][$index] == $fld){
				$temp_result = $this->rep_data[$iteration][$key]['text_value'];
				
				if($temp_result !== null && $raw === 'raw'){
					return $temp_result;
				}

				if($temp_result !== null){
					$result .=  $temp_result.'<br>';
				}
			}
		}

		return $result;
	}

	private function buildTableHTML(){
		
		$shades = array('Inc'=>'#FFEBE6', 'Unverified'=>'#FFFFF0' , 'Comp' =>'#EBF5EB');

		$html = '<br><a style="font-size:18px" href="'.RF_BASE_URL.'action.php?pid='.$this->config['pid'].'&rec='.$this->config['rec'].'&instr='.$this->config['instr'].'&event='.$this->config['event'].'&token=-1&action=clear&curr_it=-1">Clear Form Above</a>';
		$html .= '<table id="colvis" class="display dataTable" cellspacing="0" width="100%"><thead><tr>';
		$html .= '<th>Edit...</th>';
		foreach ($this->config['instr_fields'] as $key => $value) {
			$html .= '<th>' . $value['field_label'] . '</th>';			
		}

		$html .= '<th>Delete...</th>';
		$html .= '</tr>';
		$html .= '</thead><tbody>';

		for ($i=0; $i < count($this->iterations); $i++) { 
			$curr_it = $this->iterations[$i];

			$cfld = $this->config['instr'] . '_complete';
			$shade_val =  $this->getVal($curr_it, $cfld, 'raw');
			$cshade = $shades[$shade_val];
			
			$html .= '<tr style="background-color:'.$cshade.'">';
			$html .= '<td><a href="'.RF_BASE_URL.'action.php?pid='.$this->config['pid'].'&rec='.$this->config['rec'].'&instr='.$this->config['instr'].'&event='.$this->config['event'].'&token=-1&action=edit&curr_it='.$curr_it.'">Edit</a></td>';
			foreach ($this->config['instr_fields'] as $key => $value) {
					$cfld = $value['field_name'];
					$html .= '<td>' . $this->getVal($curr_it, $cfld) . '<br></td>';			
			}
			$html .= '<td><a href="'.RF_BASE_URL.'action.php?pid='.$this->config['pid'].'&rec='.$this->config['rec'].'&instr='.$this->config['instr'].'&event='.$this->config['event'].'&token=-1&action=delete&curr_it='.$curr_it.'">Delete</a></td>';
			$html .= '</tr>';
		}
		$html .= '</tbody></table>';

		include('/../html/hdr.html');
		
		echo $html;
	}
	

}


/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/


// CLASS: ACTION
// REQ INPUT: CONFIG array from class CONFIG (noted above), REPEATING data for form, current instr data saved in RC, mysql conn resource
// DESC:  	There are a variety of actions that can be performed on a repeating form 
// 			(1) SAVE record to repeating table
// 			(2) DELETE record from repeating table
// 			(3) EDIT record in repeating form table
// 			(4) CLEAR data in RC form
// 			Class is responsible for reading the required action from master CONFIG array and executing the proper scripts



class action{

	private static $config;
	private static $instr_data;
	private static $conn;
	private static $rep_data;

	public function __construct($config, $instr_data, $conn, $rep_data){
		$this->config = $config;
		$this->instr_data = $instr_data;
		$this->conn = $conn;
		$this->rep_data = $rep_data;
		$this->isCurrIterationRegistered();
		
		switch ($this->config['action']) {
			case 'save': // save record just enetered into RC form into RF schema and clear any flags on record that denote an edit is to occur
				$this->saveRepDataRec(); 
				$this->deleteEditRec();	
				break;
			case 'delete': 
				$this->deleteRepDataRec();
				break;
			case 'edit': // clear edit flags for record and instrument, register the newest record and load that rec into RC form
				$this->deleteEditRec();				
				$this->registerEditRec();
				$this->loadRepDataRec();
				break;
			case 'clear': // clear the form and any records that are registered for editing
				$this->clearDataEntryForm();
				$this->deleteEditRec();	
				break;	
		}
	}


	// utility fcn that gets next available iteration when a new record is added to table
	private function getNextIteration(){
		
		$sql = "select max(iteration) as maxit from rf_data where event_id ='".$this->config['event']."' and instrument='" . $this->config['instr'] . "' and record='" . $this->config['rec']. "' and project_id='" . $this->config['pid']."'";
		$res = mysqli_query($this->conn, $sql);

		$row = mysqli_fetch_assoc($res);

		if($row['maxit'] === null){
			return  1;
		}
		else{
			return $row['maxit']+1;
		}
	}


	// when save is performed: fcn will check if the save is related to a record that is be ing edited or if a new record needs to be created
	// if new, next iteration is extracted and record is simply inserted into table
	// if edit, record iteration being edited will be cleared and a new record will be added with the iteraion number that was being edited
	// TO DO: must make more efficient - consider an update process as opposed to DELETE and then INSERT  
	private function saveRepDataRec(){

		$edit_flag = $this->isCurrIterationRegistered();

		if($edit_flag == null){
			$itbegin = $this->getNextIteration();
		}else{
			$itbegin = $edit_flag;
			$this->deleteRepDataRec($itbegin);
		}

		$data = $this->instr_data[$this->config['rec']][$this->config['event']];

		foreach ($data as $key => $value) {
		
			if(is_array($value)){
				foreach ($value as $check_key => $check_value) {
				$sql = 'insert into  rf_data (project_id, record, instrument, event_id, iteration, field_name, value, field_type, root_name) values ('.$this->config['pid'].',"'.$this->config['rec'].'","'.$this->config['instr'].'",'.$this->config['event'].','.$itbegin.',"'.$key.'___'.$check_key. '","'.$check_value.'","'.REDCap::getFieldType($key).'", "'.$key.'")';
				$res = mysqli_query($this->conn, $sql);
				}
			}
		
			else{
				$sql = 'insert into  rf_data (project_id, record, instrument, event_id, iteration, field_name, value, field_type, root_name) values ('.$this->config['pid'].',"'.$this->config['rec'].'","'.$this->config['instr'].'",'.$this->config['event'].','.$itbegin.',"'.$key.'","'.$value.'","'.REDCap::getFieldType($key).'", "'.$key.'")';
				$res = mysqli_query($this->conn, $sql);
			}
		}
	
		$this->clearDataEntryForm();
	}


	// utility fcn used to clear current form of data
	// fcn builds XML string needed to import 'empty' data  - accomodating both checkbox and non-checkbox fields
	// XML string is imported into project using RC API - overwriteBehavior set to overwrite
	// result is that current record/instr in RC appears 'empty' and ready for next entry  
	private function clearDataEntryForm(){

		$flds = REDCap::getFieldNames($this->config['instr']);
		$pkey = REDCap::getRecordIdField($this->config['pid']);

		$xml  = '<?xml version="1.0" encoding="UTF-8" ?><records><item>
      					<record>'.$this->config['rec'].'</record>
      					<field_name>'.$pkey.'</field_name>
      					<value>'.$this->config['rec'].'</value>
   					</item>';


		foreach ($flds as $key => $field) {
			$type = REDCap::getFieldType($field);

			if($field == $pkey)
				continue;

			$import_val = ($type == 'checkbox') ? 0 : null;
			
			if($type != 'checkbox'){
				$xml .= '<item>
      						<record>'.$this->config['rec'].'</record>
      						<field_name>'.$field.'</field_name>
      						<value>'.$import_val.'</value>
   						</item>';
   			}

   			if($type == 'checkbox'){
   				$info = $this->config['instr_fields'][$field]['field_meta'];
   				foreach ($info as $check_val => $check_lbl) {
   					$xml .= '<item>
  	    						<record>'.$this->config['rec'].'</record>
    	  						<field_name>'.$field.'___'.$check_val.'</field_name>
      							<value>'.$import_val.'</value>
   							</item>';
   				}
   			}
		}
		$xml .=  '</records>';

		$data = array('content' => 'record', 'type' => 'eav', 'format' => 'xml', 'token' => $this->config['token'], 'overwriteBehavior'=>'overwrite', 'data' => $xml);
		$request = new RestCallRequest($this->config['api_url'], 'POST', $data);
		$request->execute();
		echo $request->getResponseBody();
	}


	// fcn deletes all of the data associated with current record iteration in rf_data
	private function deleteRepDataRec($curr_it=null){

		$curr_it = ($curr_it == null) ? $this->config['curr_it'] : $curr_it;

		$crec = $this->rep_data[$curr_it];

		foreach ($crec as $key => $value) {
			$del_pkeys[] = $value['pkey'];
		}
		
		$del_pkeys = implode(",", $del_pkeys);

		$sql = "DELETE FROM rf_data where pkey in (".$del_pkeys.")";
        $res = mysqli_query($this->conn, $sql);
     
        if(is_bool($res)){
            return null;
            //TO DO: need ewception handling
        }
	}


	// utility fcn used to load data for a given record iteration (generally selected by user in table) selected fr) into the RC form
	// fcn uses data compiled in DATA layer to build XML string needed to import data  - accomodating both checkbox and non-checkbox fields
	// XML string is imported into project using RC API - overwriteBehavior set to overwrite
	// result is that current record/instr in RC contains all data in row selected by user  
	private function loadRepDataRec(){

		$user_rights = REDCap::getUserRights(USERID);
		$rc_token = $user_rights[USERID][api_token];

		if($rc_token == null){
			REDCap::allowProjects(-1);
		}

		$crec = $this->rep_data[$this->config['curr_it']];
		$xml  = '<?xml version="1.0" encoding="UTF-8" ?><records>';

		foreach ($crec as $key => $value) {
			$xml .= '<item>
      					<record>'.$this->config['rec'].'</record>
      					<field_name>'.$value['field_name'].'</field_name>
      					<value>'.$value['value'].'</value>
   					</item>';
		}
		
		$xml .=  '</records>';

		$data = array('content' => 'record', 'type' => 'eav', 'format' => 'xml', 'token' => $rc_token, 'overwriteBehavior'=>'overwrite', 'data' => $xml);
		$request = new RestCallRequest($this->config['api_url'], 'POST', $data);
		echo $request->execute();
	}


	// registers a given record/instr/iteration with rf_aedits
	// used to denote that curr rec/instr/iteration is being edited
	private function registerEditRec(){

		$sql = 'insert into  rf_edits (pid, record, instr, event, curr_it) values ('.$this->config['pid'].',"'.$this->config['rec'].'","'.$this->config['instr'].'",'.$this->config['event'].','.$this->config['curr_it'].')';
		$res = mysqli_query($this->conn, $sql);
	}


	// unregisters a given record/instr/iteration with rf_aedits
	private function deleteEditRec(){
		
		$sql = "DELETE FROM rf_edits where pid='".$this->config['pid']."' and record=".$this->config['rec']." and instr='".$this->config['instr']."' and event=" .$this->config['event'];
        $res = mysqli_query($this->conn, $sql);
	}


	// utility fcn that checks if current record/instr is undergoing an edit
	// returns null if nothing is registered, otherwise it returns the iteration that is currently registered in rf_edits (for that record/instr)
	private function isCurrIterationRegistered($result = 'raw'){
		$sql = "select * from rf_edits where pid='".$this->config['pid']."' and record=".$this->config['rec']." and instr='".$this->config['instr']."' and event=" .$this->config['event'];
		$res = mysqli_query($this->conn, $sql);

		if(is_bool($res)){
            echo 'err running query';
            return null;
            //TO DO: need ewception handling
        }
       
        $rows = mysqli_num_rows($res); 
        if($rows != 1){
        	echo 'err finding flag in rf_edits';
        	return null;
        }


            $row = mysqli_fetch_assoc($res);
		    return $row['curr_it'];
	}
}



/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/
/************************************************************************************************/



class controller{

	public function __construct($project_id,$record, $instrument, $event_id, $rc_token, $action){
		$user_rights = REDCap::getUserRights(USERID);
		$rc_token = $user_rights[USERID][api_token];

		if($rc_token == null){
			REDCap::allowProjects(-1);
		}

		$c = new config($project_id,$record, $instrument, $event_id, $rc_token, $action);
		$d = new data($c->config);
		
		switch ($action) {
			case 'save':
				new action($d->config,$d->instr_data_raw,$d->getConn(), $d->rep_data);
				break;
				
			case 'disp':
				new ui($d->config, $d->rep_data, $d->instr_data_raw, $d->rep_data_iterations);
				break;

			case 'clear':
				new action($d->config,$d->instr_data_raw,$d->getConn(), $d->rep_data);
				break;
			
		}
	}
}

?>